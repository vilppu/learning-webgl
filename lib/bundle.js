require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var setupViewPortOf = exports.setupViewPortOf = function (gl) {
  gl.clearColor(0, 0, 0, 1);
  gl.enable(gl.DEPTH_TEST);
  gl.projectionMatrix = mat4.create();
  gl.viewMatrix = mat4.create();
  mat4.perspective(gl.projectionMatrix, 45, gl.canvas.width / gl.canvas.height, 0.1, 100);
  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
};

var clearViewPortOf = exports.clearViewPortOf = function (gl) {
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
};

var positionCameraTo = exports.positionCameraTo = function (positionVector) {
  return {
    using: function (gl) {}
  };
};

var directCameraTo = exports.directCameraTo = function (directionVector) {
  return {
    using: function (gl) {}
  };
};

},{}],2:[function(require,module,exports){
"use strict";

var getWebGLContextOf = exports.getWebGLContextOf = function (canvas) {
  var glOptions = { antialias: true };
  var gl = canvas.getContext("webgl", glOptions) || canvas.getContext("experimental-webgl", glOptions);

  if (!gl) {
    throw "WebGL is not supported";
  }

  return gl;
};

},{}],3:[function(require,module,exports){
"use strict";

var loadShaderProgram = require("./gl-shaders").loadShaderProgram;
var render = exports.render = function (renderable) {
  return {
    to: function (gl) {
      var verterBufferFrom = function (renderable) {
        var vertices = renderable.vertices;
        var vertexBuffer = gl.createBuffer();

        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        vertexBuffer.itemSize = 3;
        vertexBuffer.numItems = 3;

        return vertexBuffer;
      };

      var shaderProgramFrom = function (renderable) {
        return loadShaderProgram(renderable.shaderNames).to(gl);
      };

      if (!renderable.vertexBuffer) {
        renderable.vertexBuffer = verterBufferFrom(renderable);
      }

      if (!renderable.shaderProgram) {
        renderable.shaderProgram = shaderProgramFrom(renderable);
      }

      if (!renderable.transformationMatrix) {
        renderable.transformationMatrix = mat4.create();
      }

      var shaderProgram = renderable.shaderProgram;

      var setMatrixUniforms = function () {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, gl.projectionMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, renderable.transformationMatrix);
      };

      mat4.identity(renderable.transformationMatrix);
      mat4.translate(renderable.transformationMatrix, renderable.transformationMatrix, [-1.5, 0, -7]);
      gl.bindBuffer(gl.ARRAY_BUFFER, renderable.vertexBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, renderable.vertexBuffer.itemSize, gl.FLOAT, false, 0, 0);
      setMatrixUniforms();
      gl.drawArrays(gl.TRIANGLES, 0, renderable.vertexBuffer.numItems);
    }
  };
};

},{"./gl-shaders":4}],4:[function(require,module,exports){
"use strict";

var validateThatShaderWasCompiledSuccessfully = function (gl, shader, shaderName) {
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    var lastError = gl.getShaderInfoLog(shader);
    gl.deleteShader(shader);
    throw "Failed to compile shader " + shaderName + ":" + lastError;
  }
};

var validateThatProgramWasLinkedSuccessfully = function (gl, shaderProgram) {
  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
    var lastError = gl.getProgramInfoLog(shaderProgram);
    gl.deleteProgram(shaderProgram);
    throw "Failed to link shader program:" + lastError;
  }
};

var loadShaderFromElement = function (elementId) {
  return {
    using: function (gl) {
      var shaderScriptElement = document.getElementById(elementId);
      var shaderType = shaderScriptElement.type == "x-shader/x-fragment" ? gl.FRAGMENT_SHADER : gl.VERTEX_SHADER;
      var shader = gl.createShader(shaderType);

      gl.shaderSource(shader, shaderScriptElement.textContent);
      gl.compileShader(shader);
      validateThatShaderWasCompiledSuccessfully(gl, shader, elementId);

      return shader;
    }
  };
};

var loadShader = function (shaderName) {
  return {
    to: function (shaderProgram) {
      return {
        using: function (gl) {
          var shader = loadShaderFromElement(shaderName).using(gl);

          gl.attachShader(shaderProgram, shader);
          gl.deleteShader(shader);

          return shader;
        }
      };
    }
  };
};

var getUniform = exports.getUniform = function (uniformName) {
  return {
    of: function (shaderProgram) {
      return {
        using: function (gl) {
          shaderProgram.uniforms = shaderProgram.uniforms || [];
          shaderProgram.uniforms[uniformName] = shaderProgram.uniforms[uniformName] || gl.getUniformLocation(shaderProgram, uniformName);

          return shaderProgram.uniforms[uniformName];
        }
      };
    }
  };
};

var loadShaderProgram = exports.loadShaderProgram = function (shaderNames) {
  return {
    to: function (gl) {
      var shaderProgram = gl.createProgram();

      for (var _iterator = shaderNames[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
        var shaderName = _step.value;
        loadShader(shaderName).to(shaderProgram).using(gl);
      }

      gl.linkProgram(shaderProgram);
      validateThatProgramWasLinkedSuccessfully(gl, shaderProgram);

      gl.useProgram(shaderProgram);
      shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
      gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

      shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
      shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");

      return shaderProgram;
    }
  };
};

},{}],"application":[function(require,module,exports){
"use strict";

var getWebGLContextOf = require("./gl-context").getWebGLContextOf;
var setupViewPortOf = require("./gl-camera").setupViewPortOf;
var clearViewPortOf = require("./gl-camera").clearViewPortOf;
var render = require("./gl-renderable").render;
var startOn = exports.startOn = function (canvas) {
  var resizeCanvasToFitWindow = function () {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  };

  var triangleVertives = [0, 1, 0, -1, -1, 0, 1, -1, 0];

  var triangle = {
    vertices: triangleVertives,
    shaderNames: ["shader-fs", "shader-vs"]
  };

  var gl = getWebGLContextOf(canvas);

  var animationLoop = function () {
    resizeCanvasToFitWindow();

    setupViewPortOf(gl);
    clearViewPortOf(gl);
    render(triangle).to(gl);
    window.requestAnimationFrame(animationLoop);
  };

  animationLoop();
};

},{"./gl-camera":1,"./gl-context":2,"./gl-renderable":3}]},{},[])
//# sourceMappingURL=data:application/json;base64,
