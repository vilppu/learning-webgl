require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var shaders = exports.shaders = {
  "default.vert": "/* default vertext shader */\r\n\r\nattribute vec3 aVertexPosition;\r\n\r\nuniform mat4 uMVMatrix;\r\nuniform mat4 uPMatrix;\r\n\r\nvoid main(void) {\r\n    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\r\n}",
  "default.frag": "/* default fragment shader */\r\n\r\nprecision mediump float;\r\n\r\nvoid main(void) {\r\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n}\r\n"
};

},{}],2:[function(require,module,exports){
"use strict";

/*global mat4:false */


var setupViewPortOf = exports.setupViewPortOf = function (gl) {
  gl.clearColor(0, 0, 0, 1);
  gl.enable(gl.DEPTH_TEST);
  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
};

var clearViewPortOf = exports.clearViewPortOf = function (gl) {
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
};

// export const positionCameraTo = (positionVector) => {
//         return {
//         using: (gl) => {  
//         }
//     };
// };

// export const directCameraTo = (directionVector) => {
//         return {
//         using: (gl) => {  
//         }
//     };
// };

},{}],3:[function(require,module,exports){
"use strict";

/*global mat4:false */

var getWebGLRenderingContextOf = exports.getWebGLRenderingContextOf = function (canvas) {
  var glOptions = { antialias: true };
  var gl = canvas.getContext("webgl", glOptions);

  if (!gl) {
    canvas.getContext("experimental-webgl", glOptions);
  }

  if (!gl) {
    throw "WebGL is not supported";
  }

  gl.projectionMatrix = mat4.create();
  gl.modelViewMatrix = mat4.create();
  mat4.perspective(gl.projectionMatrix, 45, gl.canvas.width / gl.canvas.height, 0.1, 100);

  return gl;
};

},{}],4:[function(require,module,exports){
"use strict";

/*
    .vert vertex shader
    .tesc tessellation control shader
    .tese tessellation evaluation shader
    .geom geometry shader
    .frag fragment shader
    .comp compute shader
*/
var shaders = require("../lib/shaders.js").shaders;


var validateThatShaderWasCompiledSuccessfully = function (gl, shader, shaderName) {
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    var lastError = gl.getShaderInfoLog(shader);
    gl.deleteShader(shader);
    throw "Failed to compile shader " + shaderName + ":" + lastError;
  }
};

var validateThatProgramWasLinkedSuccessfully = function (gl, shaderProgram) {
  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
    var lastError = gl.getProgramInfoLog(shaderProgram);
    gl.deleteProgram(shaderProgram);
    throw "Failed to link shader program:" + lastError;
  }
};

var loadShaderFromLibrary = function (shaderName) {
  return {
    using: function (gl) {
      var shaderSource = shaders[shaderName];
      var shaderType = shaderName.indexOf("frag") !== -1 ? gl.FRAGMENT_SHADER : gl.VERTEX_SHADER;
      var shader = gl.createShader(shaderType);

      gl.shaderSource(shader, shaderSource);
      gl.compileShader(shader);
      validateThatShaderWasCompiledSuccessfully(gl, shader, shaderName);

      return shader;
    }
  };
};

var loadShader = function (shaderName) {
  return {
    to: function (shaderProgram) {
      return {
        using: function (gl) {
          var shader = loadShaderFromLibrary(shaderName).using(gl);

          gl.attachShader(shaderProgram, shader);
          gl.deleteShader(shader);

          return shader;
        }
      };
    }
  };
};

var getUniform = exports.getUniform = function (uniformName) {
  return {
    of: function (shaderProgram) {
      return {
        using: function (gl) {
          shaderProgram.uniforms = shaderProgram.uniforms || [];
          shaderProgram.uniforms[uniformName] = shaderProgram.uniforms[uniformName] || gl.getUniformLocation(shaderProgram, uniformName);

          return shaderProgram.uniforms[uniformName];
        }
      };
    }
  };
};

var loadShaderProgram = exports.loadShaderProgram = function (shaderNames) {
  return {
    to: function (gl) {
      var shaderProgram = gl.createProgram();

      for (var _iterator = shaderNames[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
        var shaderName = _step.value;
        loadShader(shaderName).to(shaderProgram).using(gl);
      }

      gl.linkProgram(shaderProgram);
      validateThatProgramWasLinkedSuccessfully(gl, shaderProgram);

      gl.useProgram(shaderProgram);
      shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
      gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

      shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
      shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");

      return shaderProgram;
    }
  };
};

},{"../lib/shaders.js":1}],5:[function(require,module,exports){
"use strict";

/*global mat4:false */
var loadShaderProgram = require("./gl-shaders").loadShaderProgram;
var getTriangleMeshFrom = exports.getTriangleMeshFrom = function (triangleMeshSource) {
  return {
    using: function (webGLRenderingContext) {
      var gl = webGLRenderingContext;

      var verterBufferFrom = function (vertices) {
        var vertexBuffer = gl.createBuffer();

        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        vertexBuffer.itemSize = 3;
        vertexBuffer.numItems = 3;

        return vertexBuffer;
      };

      var shaderProgramFrom = function (shaderNames) {
        return loadShaderProgram(shaderNames).to(gl);
      };

      return {
        vertexBuffer: verterBufferFrom(triangleMeshSource.vertices),
        shaderProgram: shaderProgramFrom(triangleMeshSource.shaderNames)
      };
    }
  };
};

var render = exports.render = function (triangleMesh) {
  return {
    to: function (webGLRenderingContext) {
      var gl = webGLRenderingContext;
      var shaderProgram = triangleMesh.shaderProgram;

      var setMatrixUniforms = function () {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, gl.projectionMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, gl.modelViewMatrix);
      };

      mat4.identity(gl.modelViewMatrix);
      mat4.translate(gl.modelViewMatrix, gl.modelViewMatrix, [0, 0, -1.8]);
      gl.bindBuffer(gl.ARRAY_BUFFER, triangleMesh.vertexBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, triangleMesh.vertexBuffer.itemSize, gl.FLOAT, false, 0, 0);
      setMatrixUniforms();
      gl.drawArrays(gl.TRIANGLES, 0, triangleMesh.vertexBuffer.numItems);
    }
  };
};

},{"./gl-shaders":4}],"application":[function(require,module,exports){
"use strict";

var getWebGLRenderingContextOf = require("./gl-context").getWebGLRenderingContextOf;
var setupViewPortOf = require("./gl-camera").setupViewPortOf;
var clearViewPortOf = require("./gl-camera").clearViewPortOf;
var getTriangleMeshFrom = require("./gl-triangle-mesh").getTriangleMeshFrom;
var render = require("./gl-triangle-mesh").render;
var startOn = exports.startOn = function (canvas) {
  var triangleVertices = [0, 1, 0, -1, -1, 0, 1, -1, 0];

  var gl = getWebGLRenderingContextOf(canvas);

  var triangleSource = {
    vertices: triangleVertices,
    shaderNames: ["default.frag", "default.vert"]
  };

  var triangle = getTriangleMeshFrom(triangleSource).using(gl);

  var resizeCanvasToFitWindow = function () {
    setupViewPortOf(gl);
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  };

  var animationLoop = function () {
    resizeCanvasToFitWindow();

    clearViewPortOf(gl);
    render(triangle).to(gl);
    window.requestAnimationFrame(animationLoop);
  };

  animationLoop();
};

},{"./gl-camera":2,"./gl-context":3,"./gl-triangle-mesh":5}]},{},[])
//# sourceMappingURL=data:application/json;base64,
